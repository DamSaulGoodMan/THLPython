
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocEQUALITYNON_EQUALITYLESSTHANGREATERTHANLESSTHAN_AND_EQUALITYGREATERTHAN_AND_EQUALITYleftPLUSMINUSleftTIMESDIVIDErightUMINUSDIVIDE DO ELSE EQUAL EQUALITY FOR GREATERTHAN GREATERTHAN_AND_EQUALITY IF LBRACKET LESSTHAN LESSTHAN_AND_EQUALITY LPAREN MINUS MODULO NAME NON_EQUALITY NUMBER PLUS RBRACKET RPAREN SEMICOLON TIMES WHILEbloc : bloc statement\n            | statement statement : IF expression body\n                 | IF expression body ELSE body\n                 | IF expression body ELSE statementbody : LBRACKET bloc RBRACKETstatement : WHILE expression body\n                 | FOR NAME EQUAL expression SEMICOLON expression SEMICOLON expression bodystatement : NAME EQUAL expression SEMICOLONstatement : expression SEMICOLONexpression : expression EQUALITY expression\n                  | expression NON_EQUALITY expression\n                  | expression LESSTHAN expression\n                  | expression GREATERTHAN expression\n                  | expression LESSTHAN_AND_EQUALITY expression\n                  | expression GREATERTHAN_AND_EQUALITY expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULO expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'IF':([0,1,2,11,14,31,32,44,48,49,51,52,53,54,59,],[3,3,-2,-1,-10,-3,3,-7,3,3,-9,-4,-5,-6,-8,]),'WHILE':([0,1,2,11,14,31,32,44,48,49,51,52,53,54,59,],[5,5,-2,-1,-10,-3,5,-7,5,5,-9,-4,-5,-6,-8,]),'FOR':([0,1,2,11,14,31,32,44,48,49,51,52,53,54,59,],[6,6,-2,-1,-10,-3,6,-7,6,6,-9,-4,-5,-6,-8,]),'NAME':([0,1,2,3,5,6,8,9,11,14,15,16,17,18,19,20,21,22,23,24,25,28,31,32,44,45,48,49,51,52,53,54,55,57,59,],[7,7,-2,13,13,27,13,13,-1,-10,13,13,13,13,13,13,13,13,13,13,13,13,-3,7,-7,13,7,7,-9,-4,-5,-6,13,13,-8,]),'MINUS':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,],[8,8,-2,8,22,8,-25,8,8,-24,-1,22,-25,-10,8,8,8,8,8,8,8,8,8,8,8,22,8,-22,22,-3,8,22,22,22,22,22,22,-17,-18,-19,-20,22,-7,8,22,-23,8,8,22,-9,-4,-5,-6,8,22,8,22,-8,]),'LPAREN':([0,1,2,3,5,8,9,11,14,15,16,17,18,19,20,21,22,23,24,25,28,31,32,44,45,48,49,51,52,53,54,55,57,59,],[9,9,-2,9,9,9,9,-1,-10,9,9,9,9,9,9,9,9,9,9,9,9,-3,9,-7,9,9,9,-9,-4,-5,-6,9,9,-8,]),'NUMBER':([0,1,2,3,5,8,9,11,14,15,16,17,18,19,20,21,22,23,24,25,28,31,32,44,45,48,49,51,52,53,54,55,57,59,],[10,10,-2,10,10,10,10,-1,-10,10,10,10,10,10,10,10,10,10,10,10,10,-3,10,-7,10,10,10,-9,-4,-5,-6,10,10,-8,]),'$end':([1,2,11,14,31,44,51,52,53,54,59,],[0,-2,-1,-10,-3,-7,-9,-4,-5,-6,-8,]),'RBRACKET':([2,11,14,31,44,49,51,52,53,54,59,],[-2,-1,-10,-3,-7,54,-9,-4,-5,-6,-8,]),'SEMICOLON':([4,7,10,13,29,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,],[14,-25,-24,-25,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,51,-23,55,57,]),'EQUALITY':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[15,-25,-24,15,-25,15,-22,15,None,None,None,None,None,None,-17,-18,-19,-20,15,15,-23,15,15,15,]),'NON_EQUALITY':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[16,-25,-24,16,-25,16,-22,16,None,None,None,None,None,None,-17,-18,-19,-20,16,16,-23,16,16,16,]),'LESSTHAN':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[17,-25,-24,17,-25,17,-22,17,None,None,None,None,None,None,-17,-18,-19,-20,17,17,-23,17,17,17,]),'GREATERTHAN':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[18,-25,-24,18,-25,18,-22,18,None,None,None,None,None,None,-17,-18,-19,-20,18,18,-23,18,18,18,]),'LESSTHAN_AND_EQUALITY':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[19,-25,-24,19,-25,19,-22,19,None,None,None,None,None,None,-17,-18,-19,-20,19,19,-23,19,19,19,]),'GREATERTHAN_AND_EQUALITY':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[20,-25,-24,20,-25,20,-22,20,None,None,None,None,None,None,-17,-18,-19,-20,20,20,-23,20,20,20,]),'PLUS':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[21,-25,-24,21,-25,21,-22,21,21,21,21,21,21,21,-17,-18,-19,-20,21,21,-23,21,21,21,]),'TIMES':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[23,-25,-24,23,-25,23,-22,23,23,23,23,23,23,23,23,23,-19,-20,23,23,-23,23,23,23,]),'DIVIDE':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[24,-25,-24,24,-25,24,-22,24,24,24,24,24,24,24,24,24,-19,-20,24,24,-23,24,24,24,]),'MODULO':([4,7,10,12,13,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,47,50,56,58,],[25,-25,-24,25,-25,25,-22,25,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,25,25,-23,25,25,25,]),'EQUAL':([7,27,],[28,45,]),'LBRACKET':([10,12,13,26,29,33,34,35,36,37,38,39,40,41,42,43,47,48,58,],[-24,32,-25,32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-23,32,32,]),'RPAREN':([10,13,29,30,33,34,35,36,37,38,39,40,41,42,43,47,],[-24,-25,-22,47,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-23,]),'ELSE':([31,54,],[48,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'bloc':([0,32,],[1,49,]),'statement':([0,1,32,48,49,],[2,11,2,53,11,]),'expression':([0,1,3,5,8,9,15,16,17,18,19,20,21,22,23,24,25,28,32,45,48,49,55,57,],[4,4,12,26,29,30,33,34,35,36,37,38,39,40,41,42,43,46,4,50,4,4,56,58,]),'body':([12,26,48,58,],[31,44,52,59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> bloc","S'",1,None,None,None),
  ('bloc -> bloc statement','bloc',2,'p_bloc','interpreterLanguageLatin.py',110),
  ('bloc -> statement','bloc',1,'p_bloc','interpreterLanguageLatin.py',111),
  ('statement -> IF expression body','statement',3,'p_statement_condition','interpreterLanguageLatin.py',123),
  ('statement -> IF expression body ELSE body','statement',5,'p_statement_condition','interpreterLanguageLatin.py',124),
  ('statement -> IF expression body ELSE statement','statement',5,'p_statement_condition','interpreterLanguageLatin.py',125),
  ('body -> LBRACKET bloc RBRACKET','body',3,'p_body','interpreterLanguageLatin.py',134),
  ('statement -> WHILE expression body','statement',3,'p_statement_loop','interpreterLanguageLatin.py',142),
  ('statement -> FOR NAME EQUAL expression SEMICOLON expression SEMICOLON expression body','statement',9,'p_statement_loop','interpreterLanguageLatin.py',143),
  ('statement -> NAME EQUAL expression SEMICOLON','statement',4,'p_statement_assign','interpreterLanguageLatin.py',154),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','interpreterLanguageLatin.py',161),
  ('expression -> expression EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',168),
  ('expression -> expression NON_EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',169),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',170),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',171),
  ('expression -> expression LESSTHAN_AND_EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',172),
  ('expression -> expression GREATERTHAN_AND_EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',173),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',191),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',192),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',193),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',194),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',195),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','interpreterLanguageLatin.py',263),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','interpreterLanguageLatin.py',268),
  ('expression -> NUMBER','expression',1,'p_expression_number','interpreterLanguageLatin.py',273),
  ('expression -> NAME','expression',1,'p_expression_name','interpreterLanguageLatin.py',278),
]
