
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocEQUALITYNON_EQUALITYLESSTHANGREATERTHANLESSTHAN_AND_EQUALITYGREATERTHAN_AND_EQUALITYleftPLUSMINUSleftTIMESDIVIDErightUMINUSBLOC DIVIDE DO ELSE EQUAL EQUALITY FOR GREATERTHAN GREATERTHAN_AND_EQUALITY IF LBRACKET LESSTHAN LESSTHAN_AND_EQUALITY LPAREN MINUS MODULO NAME NON_EQUALITY NUMBER PLUS RBRACKET RPAREN SEMICOLON TIMES WHILEbloc : bloc statement\n            | statement statement : IF expression LBRACKET bloc RBRACKET\n                 | IF expression LBRACKET bloc RBRACKET ELSE LBRACKET bloc RBRACKETbody : LBRACKET bloc RBRACKETstatement : WHILE expression body\n                 | FOR NAME EQUAL expression SEMICOLON expression SEMICOLON expression bodystatement : NAME EQUAL expression SEMICOLONstatement : expression SEMICOLONexpression : expression EQUALITY expression\n                  | expression NON_EQUALITY expression\n                  | expression LESSTHAN expression\n                  | expression GREATERTHAN expression\n                  | expression LESSTHAN_AND_EQUALITY expression\n                  | expression GREATERTHAN_AND_EQUALITY expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression MODULO expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'RBRACKET':([9,24,27,33,48,49,51,52,54,60,61,62,],[-2,-9,-1,-6,-8,52,54,-5,-3,62,-7,-4,]),'NAME':([0,2,4,5,6,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,27,32,33,45,46,48,49,51,52,53,54,57,58,60,61,62,],[1,12,26,1,12,12,-2,12,12,12,12,12,12,12,12,12,12,12,12,-9,12,-1,1,-6,12,1,-8,1,1,-5,12,-3,12,1,1,-7,-4,]),'SEMICOLON':([1,3,7,12,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,],[-24,24,-23,-24,-21,48,-12,-18,-11,-15,-16,-14,-19,-17,-10,-20,-13,-22,53,57,]),'EQUAL':([1,26,],[11,45,]),'GREATERTHAN_AND_EQUALITY':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,17,-23,-24,17,17,17,-21,17,None,-18,None,None,-16,None,-19,-17,None,17,None,-22,17,17,17,]),'PLUS':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,18,-23,-24,18,18,18,-21,18,18,-18,18,18,-16,18,-19,-17,18,18,18,-22,18,18,18,]),'LESSTHAN_AND_EQUALITY':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,19,-23,-24,19,19,19,-21,19,None,-18,None,None,-16,None,-19,-17,None,19,None,-22,19,19,19,]),'$end':([5,9,24,27,33,48,52,54,61,62,],[0,-2,-9,-1,-6,-8,-5,-3,-7,-4,]),'RPAREN':([7,12,29,30,34,35,36,37,38,39,40,41,42,43,44,47,],[-23,-24,47,-21,-12,-18,-11,-15,-16,-14,-19,-17,-10,-20,-13,-22,]),'FOR':([0,5,9,24,27,32,33,46,48,49,51,52,54,58,60,61,62,],[4,4,-2,-9,-1,4,-6,4,-8,4,4,-5,-3,4,4,-7,-4,]),'LESSTHAN':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,14,-23,-24,14,14,14,-21,14,None,-18,None,None,-16,None,-19,-17,None,14,None,-22,14,14,14,]),'LBRACKET':([7,12,13,28,30,34,35,36,37,38,39,40,41,42,43,44,47,56,59,],[-23,-24,32,46,-21,-12,-18,-11,-15,-16,-14,-19,-17,-10,-20,-13,-22,58,32,]),'TIMES':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,15,-23,-24,15,15,15,-21,15,15,-18,15,15,15,15,-19,15,15,15,15,-22,15,15,15,]),'NON_EQUALITY':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,16,-23,-24,16,16,16,-21,16,None,-18,None,None,-16,None,-19,-17,None,16,None,-22,16,16,16,]),'IF':([0,5,9,24,27,32,33,46,48,49,51,52,54,58,60,61,62,],[6,6,-2,-9,-1,6,-6,6,-8,6,6,-5,-3,6,6,-7,-4,]),'LPAREN':([0,2,5,6,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,27,32,33,45,46,48,49,51,52,53,54,57,58,60,61,62,],[8,8,8,8,8,-2,8,8,8,8,8,8,8,8,8,8,8,8,-9,8,-1,8,-6,8,8,-8,8,8,-5,8,-3,8,8,8,-7,-4,]),'WHILE':([0,5,9,24,27,32,33,46,48,49,51,52,54,58,60,61,62,],[2,2,-2,-9,-1,2,-6,2,-8,2,2,-5,-3,2,2,-7,-4,]),'DIVIDE':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,20,-23,-24,20,20,20,-21,20,20,-18,20,20,20,20,-19,20,20,20,20,-22,20,20,20,]),'MINUS':([0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,61,62,],[10,-24,10,21,10,10,-23,10,-2,10,10,-24,21,10,10,10,10,10,10,10,10,10,10,-9,10,-1,21,21,-21,21,10,-6,21,-18,21,21,-16,21,-19,-17,21,21,21,10,10,-22,-8,10,21,10,-5,10,-3,21,10,10,21,10,-7,-4,]),'EQUALITY':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,22,-23,-24,22,22,22,-21,22,None,-18,None,None,-16,None,-19,-17,None,22,None,-22,22,22,22,]),'MODULO':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,23,-23,-24,23,23,23,-21,23,-12,-18,-11,-15,-16,-14,-19,-17,-10,23,-13,-22,23,23,23,]),'ELSE':([54,],[56,]),'NUMBER':([0,2,5,6,8,9,10,11,14,15,16,17,18,19,20,21,22,23,24,25,27,32,33,45,46,48,49,51,52,53,54,57,58,60,61,62,],[7,7,7,7,7,-2,7,7,7,7,7,7,7,7,7,7,7,7,-9,7,-1,7,-6,7,7,-8,7,7,-5,7,-3,7,7,7,-7,-4,]),'GREATERTHAN':([1,3,7,12,13,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,47,50,55,59,],[-24,25,-23,-24,25,25,25,-21,25,None,-18,None,None,-16,None,-19,-17,None,25,None,-22,25,25,25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'bloc':([0,32,46,58,],[5,49,51,60,]),'body':([13,59,],[33,61,]),'expression':([0,2,5,6,8,10,11,14,15,16,17,18,19,20,21,22,23,25,32,45,46,49,51,53,57,58,60,],[3,13,3,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,3,50,3,3,3,55,59,3,3,]),'statement':([0,5,32,46,49,51,58,60,],[9,27,9,9,27,27,9,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> bloc","S'",1,None,None,None),
  ('bloc -> bloc statement','bloc',2,'p_bloc','interpreterLanguageLatin.py',118),
  ('bloc -> statement','bloc',1,'p_bloc','interpreterLanguageLatin.py',119),
  ('statement -> IF expression LBRACKET bloc RBRACKET','statement',5,'p_statement_condition','interpreterLanguageLatin.py',142),
  ('statement -> IF expression LBRACKET bloc RBRACKET ELSE LBRACKET bloc RBRACKET','statement',9,'p_statement_condition','interpreterLanguageLatin.py',143),
  ('body -> LBRACKET bloc RBRACKET','body',3,'p_body','interpreterLanguageLatin.py',153),
  ('statement -> WHILE expression body','statement',3,'p_statement_loop','interpreterLanguageLatin.py',161),
  ('statement -> FOR NAME EQUAL expression SEMICOLON expression SEMICOLON expression body','statement',9,'p_statement_loop','interpreterLanguageLatin.py',162),
  ('statement -> NAME EQUAL expression SEMICOLON','statement',4,'p_statement_assign','interpreterLanguageLatin.py',171),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expr','interpreterLanguageLatin.py',178),
  ('expression -> expression EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',185),
  ('expression -> expression NON_EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',186),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',187),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',188),
  ('expression -> expression LESSTHAN_AND_EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',189),
  ('expression -> expression GREATERTHAN_AND_EQUALITY expression','expression',3,'p_expression_bool','interpreterLanguageLatin.py',190),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',208),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',209),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',210),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',211),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binop','interpreterLanguageLatin.py',212),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','interpreterLanguageLatin.py',290),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','interpreterLanguageLatin.py',295),
  ('expression -> NUMBER','expression',1,'p_expression_number','interpreterLanguageLatin.py',300),
  ('expression -> NAME','expression',1,'p_expression_name','interpreterLanguageLatin.py',305),
]
